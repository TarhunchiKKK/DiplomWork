// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: documents.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { IEmptyResponse, IHttpError, IOnlyId } from "./common";

const protobufPackage = "documents";

export interface ICreateDocumentDto {
  authorId: string;
  title: string;
  typeId: string;
  aimId: string;
  isUrgent: boolean;
  fileExtension: string;
}

export interface ICreateDocumentResponseData {
  id: string;
  title: string;
  authorId: string;
  typeId: string;
  aimId: string;
  status: string;
  isUrgent: boolean;
}

export interface ICreateDocumentResponse {
  data?: ICreateDocumentResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IUpdateDocumentDto {
  id: string;
  title?: string | undefined;
  typeId?: string | undefined;
  aimId?: string | undefined;
  isUrgent?: boolean | undefined;
}

export interface IFindDocumentsDto {
  authorId?: string | undefined;
  typeId?: string | undefined;
  aimId?: string | undefined;
  status?: string | undefined;
  isUrgent?: boolean | undefined;
  sortOrder?: string | undefined;
}

export interface IDocumentShortData {
  id: string;
  title: string;
  createdAt: string;
}

export interface IFindDocumentResponseData {
  documents: IDocumentShortData[];
}

export interface IFindDocumentsResponse {
  data?: IFindDocumentResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IFindOneDocumentResponse {
  id: string;
  title: string;
  typeId: string;
  aimId: string;
  isUrgent: boolean;
  status: string;
  authorId: string;
}

export interface IFindDocumentByIdResponse {
  data?: IFindOneDocumentResponse | undefined;
  error?: IHttpError | undefined;
}

export interface IAddToFavouriteDto {
  userId: string;
  documentId: string;
}

export interface IRemoveFromFavouriteDto {
  documentId: string;
  userId: string;
}

export interface ICreateDocumentVersionDto {
  documentId: string;
  fileExtension: string;
  description?: string | undefined;
}

export interface ICreateDocumentVersionResponseData {
  url: string;
}

export interface ICreateDocumentVersionResponse {
  data?: ICreateDocumentVersionResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IVersion {
  id: string;
  description?: string | undefined;
  url: string;
  createdAt: string;
}

export interface IFindAllVersionsResponseData {
  versions: IVersion[];
}

export interface IFindAllDocumentVersionsResponse {
  data?: IFindAllVersionsResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IFindOneDocumentVersionResponse {
  data?: IVersion | undefined;
  error?: IHttpError | undefined;
}

export interface ICreateDocumentCommentDto {
  message: string;
  creatorId: string;
  versionId: string;
}

export interface ICreateDocumentCommentResponseData {
  id: string;
  message: string;
  creatorId: string;
  createdAt: string;
}

export interface ICreateDocumentCommentResponse {
  data?: ICreateDocumentCommentResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface ICommentShortData {
  id: string;
  message: string;
  creatorId: string;
  createdAt: string;
}

export interface IFindOneDocumentCommentResponse {
  data?: ICommentShortData | undefined;
  error?: IHttpError | undefined;
}

export interface IFindAllCommentsResponseData {
  comments: ICommentShortData[];
}

export interface IFindAllCommentsResponse {
  data?: IFindAllCommentsResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IUpdateDocumentCommentDto {
  id: string;
  message: string;
}

export const DOCUMENTS_PACKAGE_NAME = "documents";

export interface DocumentsServiceClient {
  create(request: ICreateDocumentDto): Observable<ICreateDocumentResponse>;

  update(request: IUpdateDocumentDto): Observable<IEmptyResponse>;

  findAll(request: IFindDocumentsDto): Observable<IFindDocumentsResponse>;

  findOneById(request: IOnlyId): Observable<IFindDocumentByIdResponse>;
}

export interface DocumentsServiceController {
  create(
    request: ICreateDocumentDto,
  ): Promise<ICreateDocumentResponse> | Observable<ICreateDocumentResponse> | ICreateDocumentResponse;

  update(request: IUpdateDocumentDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  findAll(
    request: IFindDocumentsDto,
  ): Promise<IFindDocumentsResponse> | Observable<IFindDocumentsResponse> | IFindDocumentsResponse;

  findOneById(
    request: IOnlyId,
  ): Promise<IFindDocumentByIdResponse> | Observable<IFindDocumentByIdResponse> | IFindDocumentByIdResponse;
}

export function DocumentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "update", "findAll", "findOneById"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("DocumentsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("DocumentsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DOCUMENTS_SERVICE_NAME = "DocumentsService";

export interface FavouriteDocumentsServiceClient {
  add(request: IAddToFavouriteDto): Observable<IEmptyResponse>;

  remove(request: IRemoveFromFavouriteDto): Observable<IEmptyResponse>;

  findAll(request: IOnlyId): Observable<IFindDocumentsResponse>;
}

export interface FavouriteDocumentsServiceController {
  add(request: IAddToFavouriteDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  remove(request: IRemoveFromFavouriteDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  findAll(
    request: IOnlyId,
  ): Promise<IFindDocumentsResponse> | Observable<IFindDocumentsResponse> | IFindDocumentsResponse;
}

export function FavouriteDocumentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["add", "remove", "findAll"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("FavouriteDocumentsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("FavouriteDocumentsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const FAVOURITE_DOCUMENTS_SERVICE_NAME = "FavouriteDocumentsService";

export interface DocumentVersionsServiceClient {
  create(request: ICreateDocumentVersionDto): Observable<ICreateDocumentVersionResponse>;

  findAll(request: IOnlyId): Observable<IFindAllDocumentVersionsResponse>;

  findOneById(request: IOnlyId): Observable<IFindOneDocumentVersionResponse>;

  findLast(request: IOnlyId): Observable<IFindOneDocumentVersionResponse>;
}

export interface DocumentVersionsServiceController {
  create(
    request: ICreateDocumentVersionDto,
  ):
    | Promise<ICreateDocumentVersionResponse>
    | Observable<ICreateDocumentVersionResponse>
    | ICreateDocumentVersionResponse;

  findAll(
    request: IOnlyId,
  ):
    | Promise<IFindAllDocumentVersionsResponse>
    | Observable<IFindAllDocumentVersionsResponse>
    | IFindAllDocumentVersionsResponse;

  findOneById(
    request: IOnlyId,
  ):
    | Promise<IFindOneDocumentVersionResponse>
    | Observable<IFindOneDocumentVersionResponse>
    | IFindOneDocumentVersionResponse;

  findLast(
    request: IOnlyId,
  ):
    | Promise<IFindOneDocumentVersionResponse>
    | Observable<IFindOneDocumentVersionResponse>
    | IFindOneDocumentVersionResponse;
}

export function DocumentVersionsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "findAll", "findOneById", "findLast"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("DocumentVersionsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("DocumentVersionsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DOCUMENT_VERSIONS_SERVICE_NAME = "DocumentVersionsService";

export interface DocumentCommentsServiceClient {
  create(request: ICreateDocumentCommentDto): Observable<ICreateDocumentCommentResponse>;

  findOneById(request: IOnlyId): Observable<IFindOneDocumentCommentResponse>;

  findAll(request: IOnlyId): Observable<IFindAllCommentsResponse>;

  update(request: IUpdateDocumentCommentDto): Observable<IEmptyResponse>;

  delete(request: IOnlyId): Observable<IEmptyResponse>;
}

export interface DocumentCommentsServiceController {
  create(
    request: ICreateDocumentCommentDto,
  ):
    | Promise<ICreateDocumentCommentResponse>
    | Observable<ICreateDocumentCommentResponse>
    | ICreateDocumentCommentResponse;

  findOneById(
    request: IOnlyId,
  ):
    | Promise<IFindOneDocumentCommentResponse>
    | Observable<IFindOneDocumentCommentResponse>
    | IFindOneDocumentCommentResponse;

  findAll(
    request: IOnlyId,
  ): Promise<IFindAllCommentsResponse> | Observable<IFindAllCommentsResponse> | IFindAllCommentsResponse;

  update(request: IUpdateDocumentCommentDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  delete(request: IOnlyId): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;
}

export function DocumentCommentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "findOneById", "findAll", "update", "delete"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("DocumentCommentsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("DocumentCommentsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DOCUMENT_COMMENTS_SERVICE_NAME = "DocumentCommentsService";
