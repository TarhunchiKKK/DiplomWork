// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: documents.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { IEmptyResponse, IHttpError } from "./common";

const protobufPackage = "documents";

export interface ICreateDocumentDto {
  authorId: string;
  title: string;
  typeId: string;
  aimId: string;
  isUrgent: boolean;
  fileExtension: string;
}

export interface ICreateDocumentResponseData {
  id: string;
  title: string;
  typeId: string;
  authorId: string;
  url: string;
}

export interface ICreateDocumentResponse {
  data?: ICreateDocumentResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IUpdateDocumentInfoDto {
  documentId: string;
  title?: string | undefined;
  typeId?: string | undefined;
  aimId?: string | undefined;
  isUrgent?: boolean | undefined;
  userId: string;
}

export const DOCUMENTS_PACKAGE_NAME = "documents";

export interface DocumentsServiceClient {
  create(request: ICreateDocumentDto): Observable<ICreateDocumentResponse>;

  updateInfo(request: IUpdateDocumentInfoDto): Observable<IEmptyResponse>;
}

export interface DocumentsServiceController {
  create(
    request: ICreateDocumentDto,
  ): Promise<ICreateDocumentResponse> | Observable<ICreateDocumentResponse> | ICreateDocumentResponse;

  updateInfo(request: IUpdateDocumentInfoDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;
}

export function DocumentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "updateInfo"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("DocumentsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("DocumentsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DOCUMENTS_SERVICE_NAME = "DocumentsService";
