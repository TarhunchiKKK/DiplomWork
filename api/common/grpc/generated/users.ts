// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { IAuthResponse, IEmptyResponse, IHttpError } from "./common";

const protobufPackage = "users";

export interface IRegisterAdminDto {
  username: string;
  email: string;
  password: string;
}

export interface ILoginDto {
  login: string;
  password: string;
}

export interface IRefreshProfileDto {
  userId: string;
}

export interface IInviteUsersDto {
  organizationId: string;
  adminEmail: string;
  emails: string[];
}

export interface IConfirmInvitationDto {
  username: string;
  password: string;
  token: string;
}

export interface IResetPasswordDto {
  userId: string;
}

export interface IUpdatePasswordDto {
  token: string;
  password: string;
}

export interface IActivateAccountDto {
  userId: string;
}

export interface IDeactivateAccountDto {
  userId: string;
}

export interface IGenerateTotpDto {
  userId: string;
  userEmail: string;
}

export interface ICreateTotpResponsedata {
  qrCode: string;
  secret: string;
}

export interface IGenerateTotpResponse {
  data?: ICreateTotpResponsedata | undefined;
  error?: IHttpError | undefined;
}

export interface IEnableTotpDto {
  userId: string;
  userEmail: string;
  secret: string;
  pin: string;
}

export interface IDisableTotpDto {
  userId: string;
}

export interface ILoginWithTotpDto {
  userId: string;
  userEmail: string;
  pin: string;
}

export const USERS_PACKAGE_NAME = "users";

export interface AuthenticationServiceClient {
  registerAdmin(request: IRegisterAdminDto): Observable<IAuthResponse>;

  login(request: ILoginDto): Observable<IAuthResponse>;

  refreshProfile(request: IRefreshProfileDto): Observable<IAuthResponse>;
}

export interface AuthenticationServiceController {
  registerAdmin(request: IRegisterAdminDto): Promise<IAuthResponse> | Observable<IAuthResponse> | IAuthResponse;

  login(request: ILoginDto): Promise<IAuthResponse> | Observable<IAuthResponse> | IAuthResponse;

  refreshProfile(request: IRefreshProfileDto): Promise<IAuthResponse> | Observable<IAuthResponse> | IAuthResponse;
}

export function AuthenticationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerAdmin", "login", "refreshProfile"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("AuthenticationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("AuthenticationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTHENTICATION_SERVICE_NAME = "AuthenticationService";

export interface UsersInvitationServiceClient {
  invite(request: IInviteUsersDto): Observable<IEmptyResponse>;

  confirm(request: IConfirmInvitationDto): Observable<IAuthResponse>;
}

export interface UsersInvitationServiceController {
  invite(request: IInviteUsersDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  confirm(request: IConfirmInvitationDto): Promise<IAuthResponse> | Observable<IAuthResponse> | IAuthResponse;
}

export function UsersInvitationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["invite", "confirm"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("UsersInvitationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("UsersInvitationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_INVITATION_SERVICE_NAME = "UsersInvitationService";

export interface PasswordRecoveryServiceClient {
  reset(request: IResetPasswordDto): Observable<IEmptyResponse>;

  update(request: IUpdatePasswordDto): Observable<IEmptyResponse>;
}

export interface PasswordRecoveryServiceController {
  reset(request: IResetPasswordDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  update(request: IUpdatePasswordDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;
}

export function PasswordRecoveryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["reset", "update"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("PasswordRecoveryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("PasswordRecoveryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PASSWORD_RECOVERY_SERVICE_NAME = "PasswordRecoveryService";

export interface AccountDeactivationServiceClient {
  activate(request: IActivateAccountDto): Observable<IEmptyResponse>;

  deactivate(request: IDeactivateAccountDto): Observable<IEmptyResponse>;
}

export interface AccountDeactivationServiceController {
  activate(request: IActivateAccountDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  deactivate(request: IDeactivateAccountDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;
}

export function AccountDeactivationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["activate", "deactivate"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("AccountDeactivationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("AccountDeactivationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ACCOUNT_DEACTIVATION_SERVICE_NAME = "AccountDeactivationService";

export interface TotpAuthenticationServiceClient {
  generate(request: IGenerateTotpDto): Observable<IGenerateTotpResponse>;

  enable(request: IEnableTotpDto): Observable<IEmptyResponse>;

  disable(request: IDisableTotpDto): Observable<IEmptyResponse>;

  login(request: ILoginWithTotpDto): Observable<IAuthResponse>;
}

export interface TotpAuthenticationServiceController {
  generate(
    request: IGenerateTotpDto,
  ): Promise<IGenerateTotpResponse> | Observable<IGenerateTotpResponse> | IGenerateTotpResponse;

  enable(request: IEnableTotpDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  disable(request: IDisableTotpDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  login(request: ILoginWithTotpDto): Promise<IAuthResponse> | Observable<IAuthResponse> | IAuthResponse;
}

export function TotpAuthenticationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["generate", "enable", "disable", "login"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("TotpAuthenticationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("TotpAuthenticationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TOTP_AUTHENTICATION_SERVICE_NAME = "TotpAuthenticationService";
