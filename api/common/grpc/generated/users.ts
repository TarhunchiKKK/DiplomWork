// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

const protobufPackage = "users";

export interface IRegisterAdminDto {
  username: string;
  email: string;
  password: string;
}

export interface IAuthResponse {
  id: string;
  username: string;
  email: string;
  role: string;
  organizationId: string;
  token: string;
}

export interface IConfirmInvitationDto {
  id: string;
  password: string;
}

export interface ICreateUserDto {
  username: string;
  email: string;
  password: string;
  role: string;
  organizationId: string;
}

export interface ICreateUserResponse {
  id: string;
  username: string;
  email: string;
  password: string;
  role: string;
  organizationId: string;
  createdAt: string;
}

export interface IInviteUsersDto {
  organizationId: string;
  adminEmail: string;
  emails: string[];
}

export const USERS_PACKAGE_NAME = "users";

export interface UsersServiceClient {
  registerAdmin(request: IRegisterAdminDto): Observable<IAuthResponse>;

  confirmInvitation(request: IConfirmInvitationDto): Observable<IAuthResponse>;

  create(request: ICreateUserDto): Observable<ICreateUserResponse>;

  inviteUsers(request: IInviteUsersDto): Observable<Empty>;
}

export interface UsersServiceController {
  registerAdmin(request: IRegisterAdminDto): Promise<IAuthResponse> | Observable<IAuthResponse> | IAuthResponse;

  confirmInvitation(request: IConfirmInvitationDto): Promise<IAuthResponse> | Observable<IAuthResponse> | IAuthResponse;

  create(request: ICreateUserDto): Promise<ICreateUserResponse> | Observable<ICreateUserResponse> | ICreateUserResponse;

  inviteUsers(request: IInviteUsersDto): void;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["registerAdmin", "confirmInvitation", "create", "inviteUsers"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
