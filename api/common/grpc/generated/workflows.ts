// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: workflows.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { IEmptyResponse, IHttpError } from "./common";

const protobufPackage = "workflows";

export interface ICreateWorkflowDto {
  userId: string;
  documentId: string;
}

export interface IWorkflowResponseData {
  id: string;
  creatorId: string;
  documentId: string;
  status: string;
  completedAt?: string | undefined;
}

export interface ICreateWorkflowResponse {
  data?: IWorkflowResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IStartWorkflowDto {
  userId: string;
  workflowId: string;
}

export interface IFindWorkflowByDocumentIdDto {
  userId: string;
  documentId: string;
}

export interface IFindWorkflowResponse {
  data?: IWorkflowResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IDeleteWorkflowDto {
  userId: string;
  workflowId: string;
}

export const WORKFLOWS_PACKAGE_NAME = "workflows";

export interface WorkflowsServiceClient {
  create(request: ICreateWorkflowDto): Observable<ICreateWorkflowResponse>;

  start(request: IStartWorkflowDto): Observable<IEmptyResponse>;

  findByDocumentId(request: IFindWorkflowByDocumentIdDto): Observable<IFindWorkflowResponse>;

  delete(request: IDeleteWorkflowDto): Observable<IEmptyResponse>;
}

export interface WorkflowsServiceController {
  create(
    request: ICreateWorkflowDto,
  ): Promise<ICreateWorkflowResponse> | Observable<ICreateWorkflowResponse> | ICreateWorkflowResponse;

  start(request: IStartWorkflowDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  findByDocumentId(
    request: IFindWorkflowByDocumentIdDto,
  ): Promise<IFindWorkflowResponse> | Observable<IFindWorkflowResponse> | IFindWorkflowResponse;

  delete(request: IDeleteWorkflowDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;
}

export function WorkflowsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "start", "findByDocumentId", "delete"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("WorkflowsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("WorkflowsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WORKFLOWS_SERVICE_NAME = "WorkflowsService";
