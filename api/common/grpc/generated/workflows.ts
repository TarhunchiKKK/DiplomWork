// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: workflows.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { IEmptyResponse, IHttpError, IOnlyId } from "./common";

const protobufPackage = "workflows";

export interface ICreateWorkflowDto {
  userId: string;
  documentId: string;
}

export interface IWorkflowResponseData {
  id: string;
  creatorId: string;
  documentId: string;
  status: string;
  completedAt?: string | undefined;
}

export interface ICreateWorkflowResponse {
  data?: IWorkflowResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IFindOneWorkflowResponse {
  data?: IWorkflowResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IUpsertWorkflowParticipantDto {
  id?: string | undefined;
  role: string;
  userId: string;
}

export interface IUpsertWorkflowParticipantsDto {
  participants: IUpsertWorkflowParticipantDto[];
  workflowId: string;
}

export const WORKFLOWS_PACKAGE_NAME = "workflows";

export interface WorkflowsServiceClient {
  create(request: ICreateWorkflowDto): Observable<ICreateWorkflowResponse>;

  start(request: IOnlyId): Observable<IEmptyResponse>;

  findOneById(request: IOnlyId): Observable<IFindOneWorkflowResponse>;

  findOneByDocumentId(request: IOnlyId): Observable<IFindOneWorkflowResponse>;

  delete(request: IOnlyId): Observable<IEmptyResponse>;
}

export interface WorkflowsServiceController {
  create(
    request: ICreateWorkflowDto,
  ): Promise<ICreateWorkflowResponse> | Observable<ICreateWorkflowResponse> | ICreateWorkflowResponse;

  start(request: IOnlyId): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  findOneById(
    request: IOnlyId,
  ): Promise<IFindOneWorkflowResponse> | Observable<IFindOneWorkflowResponse> | IFindOneWorkflowResponse;

  findOneByDocumentId(
    request: IOnlyId,
  ): Promise<IFindOneWorkflowResponse> | Observable<IFindOneWorkflowResponse> | IFindOneWorkflowResponse;

  delete(request: IOnlyId): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;
}

export function WorkflowsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "start", "findOneById", "findOneByDocumentId", "delete"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("WorkflowsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("WorkflowsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WORKFLOWS_SERVICE_NAME = "WorkflowsService";

export interface WorkflowParticipantsServiceClient {
  upsertWorkflowParticipants(request: IUpsertWorkflowParticipantsDto): Observable<IEmptyResponse>;
}

export interface WorkflowParticipantsServiceController {
  upsertWorkflowParticipants(
    request: IUpsertWorkflowParticipantsDto,
  ): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;
}

export function WorkflowParticipantsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["upsertWorkflowParticipants"];
    for (const method of grpcMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcMethod("WorkflowParticipantsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      
        const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);

        if (!descriptor) {
            continue;
        }
        
      GrpcStreamMethod("WorkflowParticipantsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WORKFLOW_PARTICIPANTS_SERVICE_NAME = "WorkflowParticipantsService";
