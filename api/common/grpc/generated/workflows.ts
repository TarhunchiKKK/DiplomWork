// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: workflows.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { IEmptyResponse, IHttpError, IOnlyId } from "./common";

const protobufPackage = "workflows";

export interface ICreateWorkflowDto {
  userId: string;
  documentId: string;
  documentTitle: string;
}

export interface IUpdateSignerDto {
  id: string;
  signerId: string;
}

export interface IWorkflowResponseData {
  id: string;
  documentTitle: string;
  creatorId: string;
  documentId: string;
  status: string;
  completedAt?: string | undefined;
  signerId?: string | undefined;
}

export interface IFullWorkflowResponse {
  id: string;
  documentTitle: string;
  creatorId: string;
  documentId: string;
  status: string;
  completedAt?: string | undefined;
  signerId?: string | undefined;
  participants: IParticipant[];
}

export interface ICreateWorkflowResponse {
  data?: IWorkflowResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IFindOneWorkflowResponse {
  data?: IFullWorkflowResponse | undefined;
  error?: IHttpError | undefined;
}

export interface IFindWorkflowsResponseData {
  workflows: IWorkflowResponseData[];
}

export interface IFindWorkflowsResponse {
  data?: IFindWorkflowsResponseData | undefined;
  error?: IHttpError | undefined;
}

export interface IParticipant {
  id: string;
  userId: string;
  approvalStatus: string;
}

export interface IUpsertWorkflowParticipantDto {
  id?: string | undefined;
  userId: string;
}

export interface IUpsertWorkflowParticipantsDto {
  participants: IUpsertWorkflowParticipantDto[];
  workflowId: string;
}

export interface IUpdateApprovalStatusDto {
  id: string;
  approvalStatus: string;
}

export const WORKFLOWS_PACKAGE_NAME = "workflows";

export interface WorkflowsServiceClient {
  create(request: ICreateWorkflowDto): Observable<ICreateWorkflowResponse>;

  updateSigner(request: IUpdateSignerDto): Observable<IEmptyResponse>;

  start(request: IOnlyId): Observable<IEmptyResponse>;

  sign(request: IOnlyId): Observable<IEmptyResponse>;

  findAllByCreatorId(request: IOnlyId): Observable<IFindWorkflowsResponse>;

  findOneById(request: IOnlyId): Observable<IFindOneWorkflowResponse>;

  findOneByDocumentId(request: IOnlyId): Observable<IFindOneWorkflowResponse>;

  delete(request: IOnlyId): Observable<IEmptyResponse>;
}

export interface WorkflowsServiceController {
  create(
    request: ICreateWorkflowDto,
  ): Promise<ICreateWorkflowResponse> | Observable<ICreateWorkflowResponse> | ICreateWorkflowResponse;

  updateSigner(request: IUpdateSignerDto): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  start(request: IOnlyId): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  sign(request: IOnlyId): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  findAllByCreatorId(
    request: IOnlyId,
  ): Promise<IFindWorkflowsResponse> | Observable<IFindWorkflowsResponse> | IFindWorkflowsResponse;

  findOneById(
    request: IOnlyId,
  ): Promise<IFindOneWorkflowResponse> | Observable<IFindOneWorkflowResponse> | IFindOneWorkflowResponse;

  findOneByDocumentId(
    request: IOnlyId,
  ): Promise<IFindOneWorkflowResponse> | Observable<IFindOneWorkflowResponse> | IFindOneWorkflowResponse;

  delete(request: IOnlyId): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;
}

export function WorkflowsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "create",
      "updateSigner",
      "start",
      "sign",
      "findAllByCreatorId",
      "findOneById",
      "findOneByDocumentId",
      "delete",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("WorkflowsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("WorkflowsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WORKFLOWS_SERVICE_NAME = "WorkflowsService";

export interface WorkflowParticipantsServiceClient {
  upsertWorkflowParticipants(request: IUpsertWorkflowParticipantsDto): Observable<IEmptyResponse>;

  findAllUserWorkflows(request: IOnlyId): Observable<IFindWorkflowsResponse>;

  updateApprovalStatus(request: IUpdateApprovalStatusDto): Observable<IEmptyResponse>;
}

export interface WorkflowParticipantsServiceController {
  upsertWorkflowParticipants(
    request: IUpsertWorkflowParticipantsDto,
  ): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;

  findAllUserWorkflows(
    request: IOnlyId,
  ): Promise<IFindWorkflowsResponse> | Observable<IFindWorkflowsResponse> | IFindWorkflowsResponse;

  updateApprovalStatus(
    request: IUpdateApprovalStatusDto,
  ): Promise<IEmptyResponse> | Observable<IEmptyResponse> | IEmptyResponse;
}

export function WorkflowParticipantsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["upsertWorkflowParticipants", "findAllUserWorkflows", "updateApprovalStatus"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("WorkflowParticipantsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("WorkflowParticipantsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WORKFLOW_PARTICIPANTS_SERVICE_NAME = "WorkflowParticipantsService";
