// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.21.12
// source: organizations.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";
import { StringValue } from "./google/protobuf/wrappers";

const protobufPackage = "organizations";

export interface IOrganization {
  _id: string;
  __v: number;
  urgencyInterval: number;
  documentAims: IDocumentAim[];
  documentTypes: IDocumentType[];
  administrativeDivisions: IAdministrativeDivision[];
}

export interface IDocumentAim {
  _id: string;
  __v: number;
  value: string;
}

export interface IDocumentType {
  _id: string;
  __v: number;
  value: string;
}

export interface IAdministrativeDivision {
  _id: string;
  __v: number;
  title: string;
  posts: IPost[];
}

export interface IPost {
  _id: string;
  __v: number;
  title: string;
}

export interface IFindOneOrganizationResponse {
  data: IOrganization[];
}

export interface IUpdateUrgencyIntervalDto {
  organizationId: string;
  urgencyInterval: number;
}

export interface IUpdateDocumentAimsDto {
  organizationId: string;
  documentAims: IDocumentAim[];
}

export interface IUpdateDocumentTypesDto {
  organizationId: string;
  documentTypes: IDocumentType[];
}

export interface IUpdateAdministrativeDivisionsDto {
  organizationId: string;
  administrativeDivisions: IAdministrativeDivision[];
}

export const ORGANIZATIONS_PACKAGE_NAME = "organizations";

export interface OrganizationsServiceClient {
  createDefault(request: Empty): Observable<IOrganization>;

  findOneById(request: StringValue): Observable<IFindOneOrganizationResponse>;

  updateUrgencyInterval(request: IUpdateUrgencyIntervalDto): Observable<Empty>;

  updateDocumentAims(request: IUpdateDocumentAimsDto): Observable<Empty>;

  updateDocumentTypes(request: IUpdateDocumentTypesDto): Observable<Empty>;

  updateAdministrativeDivisions(request: IUpdateAdministrativeDivisionsDto): Observable<Empty>;
}

export interface OrganizationsServiceController {
  createDefault(request: Empty): Promise<IOrganization> | Observable<IOrganization> | IOrganization;

  findOneById(
    request: StringValue,
  ): Promise<IFindOneOrganizationResponse> | Observable<IFindOneOrganizationResponse> | IFindOneOrganizationResponse;

  updateUrgencyInterval(request: IUpdateUrgencyIntervalDto): void;

  updateDocumentAims(request: IUpdateDocumentAimsDto): void;

  updateDocumentTypes(request: IUpdateDocumentTypesDto): void;

  updateAdministrativeDivisions(request: IUpdateAdministrativeDivisionsDto): void;
}

export function OrganizationsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createDefault",
      "findOneById",
      "updateUrgencyInterval",
      "updateDocumentAims",
      "updateDocumentTypes",
      "updateAdministrativeDivisions",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrganizationsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrganizationsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORGANIZATIONS_SERVICE_NAME = "OrganizationsService";
