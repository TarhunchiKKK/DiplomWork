// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: users-management.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";
import { Timestamp } from "./google/protobuf/timestamp";

export interface CreateUserDto {
    username: string;
    email: string;
    password: string;
    role: string;
    organizationId: string;
}

export interface UpdateUserDto {
    jwt: string;
    username: string | undefined;
}

export interface DeleteUserDto {
    jwt: string;
}

export interface FindOneUserByIdDto {
    userId: string;
}

export interface FindOneUserByEmailDto {
    email: string;
    organizationId: string;
}

export interface FindOneUserByUsernameDto {
    username: string;
    organizationId: string;
}

export interface FindAllUsersDto {
    organizationId: string;
}

export interface FindAllUsersByIdsDto {
    ids: string[];
}

export interface AddDocumentAccessTokenDto {
    userId: string;
    token: string;
}

export interface DeleteDocumentAccessTokenDto {
    userId: string;
    token: string;
}

export interface User {
    id: string;
    username: string;
    email: string;
    role: string;
    createdAt: Timestamp | undefined;
    isTwoFactorEnabled: boolean;
    isDeactivated: boolean;
    post: Post | undefined;
}

export interface Post {
    id: string;
    division: string;
    post: string;
}

export interface FindUsersResponse {
    users: User[];
}

export const USERS_MANAGEMENT_PACKAGE_NAME = "usersManagement";

export interface UsersManagementServiceClient {
    create(request: CreateUserDto): Observable<User>;

    update(request: UpdateUserDto): Observable<Empty>;

    delete(request: DeleteUserDto): Observable<Empty>;

    findOneById(request: FindOneUserByIdDto): Observable<User>;

    findOneByEmail(request: FindOneUserByEmailDto): Observable<User>;

    findOneByUsername(request: FindOneUserByUsernameDto): Observable<User>;

    findAll(request: FindAllUsersDto): Observable<FindUsersResponse>;

    findAllByIds(request: FindAllUsersByIdsDto): Observable<FindUsersResponse>;

    addDocumentAccessToken(request: AddDocumentAccessTokenDto): Observable<Empty>;

    deleteDocumentAccessToken(request: DeleteDocumentAccessTokenDto): Observable<Empty>;
}

export interface UsersManagementServiceController {
    create(request: CreateUserDto): Promise<User> | Observable<User> | User;

    update(request: UpdateUserDto): void;

    delete(request: DeleteUserDto): void;

    findOneById(request: FindOneUserByIdDto): Promise<User> | Observable<User> | User;

    findOneByEmail(request: FindOneUserByEmailDto): Promise<User> | Observable<User> | User;

    findOneByUsername(request: FindOneUserByUsernameDto): Promise<User> | Observable<User> | User;

    findAll(request: FindAllUsersDto): Promise<FindUsersResponse> | Observable<FindUsersResponse> | FindUsersResponse;

    findAllByIds(
        request: FindAllUsersByIdsDto
    ): Promise<FindUsersResponse> | Observable<FindUsersResponse> | FindUsersResponse;

    addDocumentAccessToken(request: AddDocumentAccessTokenDto): void;

    deleteDocumentAccessToken(request: DeleteDocumentAccessTokenDto): void;
}

export function UsersManagementServiceControllerMethods() {
    return function (constructor: Function) {
        const grpcMethods: string[] = [
            "create",
            "update",
            "delete",
            "findOneById",
            "findOneByEmail",
            "findOneByUsername",
            "findAll",
            "findAllByIds",
            "addDocumentAccessToken",
            "deleteDocumentAccessToken"
        ];
        for (const method of grpcMethods) {
            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            GrpcMethod("UsersManagementService", method)(constructor.prototype[method], method, descriptor);
        }
        const grpcStreamMethods: string[] = [];
        for (const method of grpcStreamMethods) {
            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            GrpcStreamMethod("UsersManagementService", method)(constructor.prototype[method], method, descriptor);
        }
    };
}

export const USERS_MANAGEMENT_SERVICE_NAME = "UsersManagementService";
