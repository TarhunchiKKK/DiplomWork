// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: workflows-management.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";
import { Timestamp } from "./google/protobuf/timestamp";

export interface Workflow {
    id: string;
    status: string;
    creatorId: string;
    documentId: string;
    participants: Participant[];
    createdAt: Timestamp | undefined;
    completedAt: Timestamp | undefined;
}

export interface Participant {
    id: string;
    userId: string;
}

export interface CreateWorkflowDto {
    creatorId: string;
    documentId: string;
}

export interface FindWorkflowByDocumentIdDto {
    documentId: string;
}

export interface UpdateWorkflowParticipantsDto {
    workflowId: string;
    participants: Participant[];
}

export interface DeleteWorkflowDto {
    workflowId: string;
}

export const WORKFLOWS_MANAGEMENT_PACKAGE_NAME = "workflowsManagement";

export interface WorkflowsManagementServiceClient {
    create(request: CreateWorkflowDto): Observable<Workflow>;

    findByDocumentId(request: FindWorkflowByDocumentIdDto): Observable<Workflow>;

    updateParticipants(request: UpdateWorkflowParticipantsDto): Observable<Empty>;

    delete(request: DeleteWorkflowDto): Observable<Empty>;
}

export interface WorkflowsManagementServiceController {
    create(request: CreateWorkflowDto): Promise<Workflow> | Observable<Workflow> | Workflow;

    findByDocumentId(request: FindWorkflowByDocumentIdDto): Promise<Workflow> | Observable<Workflow> | Workflow;

    updateParticipants(request: UpdateWorkflowParticipantsDto): void;

    delete(request: DeleteWorkflowDto): void;
}

export function WorkflowsManagementServiceControllerMethods() {
    return function (constructor: Function) {
        const grpcMethods: string[] = ["create", "findByDocumentId", "updateParticipants", "delete"];
        for (const method of grpcMethods) {
            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            GrpcMethod("WorkflowsManagementService", method)(constructor.prototype[method], method, descriptor);
        }
        const grpcStreamMethods: string[] = [];
        for (const method of grpcStreamMethods) {
            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            GrpcStreamMethod("WorkflowsManagementService", method)(constructor.prototype[method], method, descriptor);
        }
    };
}

export const WORKFLOWS_MANAGEMENT_SERVICE_NAME = "WorkflowsManagementService";
