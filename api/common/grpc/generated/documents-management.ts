// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: documents-management.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export interface Document {
    id: string;
    authorId: string;
    type: string;
    status: string;
    accessToken: string;
    currentVersion: string;
}

export interface CreateDocumentDto {
    authorId: string;
    type: string;
    status: string;
}

export interface UpdateDocumentDto {
    documentId: string | undefined;
    authorId: string | undefined;
    type: string | undefined;
    status: string | undefined;
}

export interface UpdateDocumentFileDto {
    documentId: Uint8Array;
    file: Uint8Array;
}

export interface DeleteDocumentDto {
    documentId: string;
}

export interface FindDocumentsResponse {
    documents: Document[];
}

export interface FindAllDocumentsDto {
    userId: string;
}

export interface FindAllDocumentsByAimDto {
    userId: string;
    aim: string;
}

export interface FindAllDocumentsByStatusDto {
    userId: string;
    status: string;
}

export interface FindUserDocumentsDto {
    userId: string;
}

export interface FindUserUrgentDocumentsDto {
    userId: string;
}

export interface FindUserDocumentsByAimDto {
    userId: string;
    aim: string;
}

export interface FindUserDocumentsByStatusDto {
    userId: string;
    status: string;
}

export interface FindUserFavouriteDocumentsDto {
    userId: string;
}

export interface FindUserDeferredDocumentsDto {
    userId: string;
}

export interface FindUserTemplatesDto {
    userId: string;
}

export interface Comment {
    id: string;
    value: string;
}

export interface CreateCommentDto {
    documentId: string;
    value: string;
}

export interface FindCommentsResponse {
    comments: Comment[];
}

export interface FindDocumentCommentsDto {
    documentId: string;
}

export interface UpdateCommentDto {
    commentId: string;
    value: string;
}

export interface DeleteCommentDto {
    commentId: string;
}

export const DOCUMENTS_MANAGEMENT_PACKAGE_NAME = "documentsManagement";

export interface DocumentsManagementServiceClient {
    create(request: CreateDocumentDto): Observable<Document>;

    update(request: UpdateDocumentDto): Observable<Empty>;

    updateFile(request: UpdateDocumentFileDto): Observable<Empty>;

    delete(request: DeleteDocumentDto): Observable<Empty>;

    findAllUrgentDocuments(request: FindAllDocumentsDto): Observable<FindDocumentsResponse>;

    findAllByAim(request: FindAllDocumentsByAimDto): Observable<FindDocumentsResponse>;

    findAllByStatus(request: FindAllDocumentsByStatusDto): Observable<FindDocumentsResponse>;

    findUserDocuments(request: FindUserDocumentsDto): Observable<FindDocumentsResponse>;

    findUserUrgentDocuments(request: FindUserUrgentDocumentsDto): Observable<FindDocumentsResponse>;

    findUserDocumentsByAim(request: FindUserDocumentsByAimDto): Observable<FindDocumentsResponse>;

    findUserDocumentsByStatus(request: FindUserDocumentsByStatusDto): Observable<FindDocumentsResponse>;

    findUserFavouriteDocuments(request: FindUserFavouriteDocumentsDto): Observable<FindDocumentsResponse>;

    findUserDeferredDocuments(request: FindUserDeferredDocumentsDto): Observable<FindDocumentsResponse>;

    findUserTemplates(request: FindUserTemplatesDto): Observable<FindDocumentsResponse>;

    createComment(request: CreateCommentDto): Observable<Comment>;

    findDocumentComments(request: FindDocumentCommentsDto): Observable<FindCommentsResponse>;

    updateComment(request: UpdateCommentDto): Observable<Empty>;

    deleteComment(request: DeleteCommentDto): Observable<Empty>;
}

export interface DocumentsManagementServiceController {
    create(request: CreateDocumentDto): Promise<Document> | Observable<Document> | Document;

    update(request: UpdateDocumentDto): void;

    updateFile(request: UpdateDocumentFileDto): void;

    delete(request: DeleteDocumentDto): void;

    findAllUrgentDocuments(
        request: FindAllDocumentsDto
    ): Promise<FindDocumentsResponse> | Observable<FindDocumentsResponse> | FindDocumentsResponse;

    findAllByAim(
        request: FindAllDocumentsByAimDto
    ): Promise<FindDocumentsResponse> | Observable<FindDocumentsResponse> | FindDocumentsResponse;

    findAllByStatus(
        request: FindAllDocumentsByStatusDto
    ): Promise<FindDocumentsResponse> | Observable<FindDocumentsResponse> | FindDocumentsResponse;

    findUserDocuments(
        request: FindUserDocumentsDto
    ): Promise<FindDocumentsResponse> | Observable<FindDocumentsResponse> | FindDocumentsResponse;

    findUserUrgentDocuments(
        request: FindUserUrgentDocumentsDto
    ): Promise<FindDocumentsResponse> | Observable<FindDocumentsResponse> | FindDocumentsResponse;

    findUserDocumentsByAim(
        request: FindUserDocumentsByAimDto
    ): Promise<FindDocumentsResponse> | Observable<FindDocumentsResponse> | FindDocumentsResponse;

    findUserDocumentsByStatus(
        request: FindUserDocumentsByStatusDto
    ): Promise<FindDocumentsResponse> | Observable<FindDocumentsResponse> | FindDocumentsResponse;

    findUserFavouriteDocuments(
        request: FindUserFavouriteDocumentsDto
    ): Promise<FindDocumentsResponse> | Observable<FindDocumentsResponse> | FindDocumentsResponse;

    findUserDeferredDocuments(
        request: FindUserDeferredDocumentsDto
    ): Promise<FindDocumentsResponse> | Observable<FindDocumentsResponse> | FindDocumentsResponse;

    findUserTemplates(
        request: FindUserTemplatesDto
    ): Promise<FindDocumentsResponse> | Observable<FindDocumentsResponse> | FindDocumentsResponse;

    createComment(request: CreateCommentDto): Promise<Comment> | Observable<Comment> | Comment;

    findDocumentComments(
        request: FindDocumentCommentsDto
    ): Promise<FindCommentsResponse> | Observable<FindCommentsResponse> | FindCommentsResponse;

    updateComment(request: UpdateCommentDto): void;

    deleteComment(request: DeleteCommentDto): void;
}

export function DocumentsManagementServiceControllerMethods() {
    return function (constructor: Function) {
        const grpcMethods: string[] = [
            "create",
            "update",
            "updateFile",
            "delete",
            "findAllUrgentDocuments",
            "findAllByAim",
            "findAllByStatus",
            "findUserDocuments",
            "findUserUrgentDocuments",
            "findUserDocumentsByAim",
            "findUserDocumentsByStatus",
            "findUserFavouriteDocuments",
            "findUserDeferredDocuments",
            "findUserTemplates",
            "createComment",
            "findDocumentComments",
            "updateComment",
            "deleteComment"
        ];
        for (const method of grpcMethods) {
            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            GrpcMethod("DocumentsManagementService", method)(constructor.prototype[method], method, descriptor);
        }
        const grpcStreamMethods: string[] = [];
        for (const method of grpcStreamMethods) {
            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            GrpcStreamMethod("DocumentsManagementService", method)(constructor.prototype[method], method, descriptor);
        }
    };
}

export const DOCUMENTS_MANAGEMENT_SERVICE_NAME = "DocumentsManagementService";
