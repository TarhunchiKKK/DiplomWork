// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: organizations-management.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";
import { StringValue } from "./google/protobuf/wrappers";

export interface Organization {
    id: string;
    settings: OrganizationSettings | undefined;
}

export interface OrganizationSettings {
    urgencyInterval: number;
    documentTypes: string[];
    OrganizationDivisions: OrganizationDivision[];
    OrganizationPosts: string[];
    documentAims: string[];
}

export interface CreateOrganizationDto {}

export interface OrganizationDivision {
    id: string;
    value: string;
}

export interface CreateOrganizationDivisionDto {
    organizationId: string;
    value: string;
}

export interface FindOrganizationDivisionsDto {
    organizationId: string;
}

export interface FindOrganizationDivisionsResponse {
    OrganizationDivisions: OrganizationDivision[];
}

export interface UpdateOrganizationDivisionDto {
    OrganizationDivisionId: string;
    value: string;
}

export interface DeleteOrganizationDivisionDto {
    OrganizationDivisionId: string;
}

export interface OrganizationPost {
    id: string;
    value: string;
}

export interface CreateOrganizationPostDto {
    organizationId: string;
    value: string;
}

export interface FindOrganizationPostsDto {
    organizationId: string;
}

export interface FindOrganizationPostsResponse {
    OrganizationPosts: OrganizationPost[];
}

export interface UpdateOrganizationPostDto {
    OrganizationPostId: string;
    value: string;
}

export interface DeleteOrganizationPostDto {
    OrganizationPostId: string;
}

export interface DocumentAim {
    id: string;
    value: string;
}

export interface CreateDocumentAimDto {
    organizationId: string;
    value: string;
}

export interface FindDocumentAimsDto {
    organizationId: string;
}

export interface FindDocumentAimsResponse {
    documentAims: DocumentAim[];
}

export interface UpdateDocumentAimDto {
    documentAimId: string;
    value: string;
}

export interface DeleteDocumentAimDto {
    documentAimId: string;
}

export interface DocumentType {
    id: string;
    value: string;
}

export interface CreateDocumentTypeDto {
    organizationId: string;
    value: string;
}

export interface FindDocumentTypesDto {
    organizationId: string;
}

export interface FindDocumentTypesResponse {
    documentTypes: DocumentType[];
}

export interface UpdateDocumentTypeDto {
    documentTypeId: string;
    value: string;
}

export interface DeleteDocumentTypeDto {
    documentTypeId: string;
}

export interface UpdateUrgencyIntervalDto {
    urgencyInterval: number;
}

export const ORGANIZATIONS_MANAGEMENT_PACKAGE_NAME = "organizationsManagement";

export interface OrganizationsManagementServiceClient {
    create(request: CreateOrganizationDto): Observable<Organization>;

    createOrganizationDivision(request: CreateOrganizationDivisionDto): Observable<StringValue>;

    findOrganizationDivisions(request: FindOrganizationDivisionsDto): Observable<FindOrganizationDivisionsResponse>;

    updateOrganizationDivision(request: UpdateOrganizationDivisionDto): Observable<Empty>;

    deleteOrganizationDivision(request: DeleteOrganizationDivisionDto): Observable<Empty>;

    createOrganizationPost(request: CreateOrganizationPostDto): Observable<OrganizationPost>;

    findOrganizationPosts(request: FindOrganizationPostsDto): Observable<FindOrganizationPostsResponse>;

    updateOrganizationPost(request: UpdateOrganizationPostDto): Observable<Empty>;

    deleteOrganizationPost(request: DeleteOrganizationPostDto): Observable<Empty>;

    createDocumentAim(request: CreateDocumentAimDto): Observable<StringValue>;

    findDocumentAims(request: FindDocumentAimsDto): Observable<FindDocumentAimsResponse>;

    updateDocumentAim(request: UpdateDocumentAimDto): Observable<Empty>;

    deleteDocumentAim(request: DeleteDocumentAimDto): Observable<Empty>;

    crateDocumentType(request: CreateDocumentTypeDto): Observable<StringValue>;

    findDocumentTypes(request: FindDocumentTypesDto): Observable<FindDocumentTypesResponse>;

    updateDocumentType(request: UpdateDocumentTypeDto): Observable<Empty>;

    deleteDocumentType(request: DeleteDocumentTypeDto): Observable<Empty>;

    updateUrgencyInterval(request: UpdateUrgencyIntervalDto): Observable<Empty>;
}

export interface OrganizationsManagementServiceController {
    create(request: CreateOrganizationDto): Promise<Organization> | Observable<Organization> | Organization;

    createOrganizationDivision(
        request: CreateOrganizationDivisionDto
    ): Promise<StringValue> | Observable<StringValue> | StringValue;

    findOrganizationDivisions(
        request: FindOrganizationDivisionsDto
    ):
        | Promise<FindOrganizationDivisionsResponse>
        | Observable<FindOrganizationDivisionsResponse>
        | FindOrganizationDivisionsResponse;

    updateOrganizationDivision(request: UpdateOrganizationDivisionDto): void;

    deleteOrganizationDivision(request: DeleteOrganizationDivisionDto): void;

    createOrganizationPost(
        request: CreateOrganizationPostDto
    ): Promise<OrganizationPost> | Observable<OrganizationPost> | OrganizationPost;

    findOrganizationPosts(
        request: FindOrganizationPostsDto
    ):
        | Promise<FindOrganizationPostsResponse>
        | Observable<FindOrganizationPostsResponse>
        | FindOrganizationPostsResponse;

    updateOrganizationPost(request: UpdateOrganizationPostDto): void;

    deleteOrganizationPost(request: DeleteOrganizationPostDto): void;

    createDocumentAim(request: CreateDocumentAimDto): Promise<StringValue> | Observable<StringValue> | StringValue;

    findDocumentAims(
        request: FindDocumentAimsDto
    ): Promise<FindDocumentAimsResponse> | Observable<FindDocumentAimsResponse> | FindDocumentAimsResponse;

    updateDocumentAim(request: UpdateDocumentAimDto): void;

    deleteDocumentAim(request: DeleteDocumentAimDto): void;

    crateDocumentType(request: CreateDocumentTypeDto): Promise<StringValue> | Observable<StringValue> | StringValue;

    findDocumentTypes(
        request: FindDocumentTypesDto
    ): Promise<FindDocumentTypesResponse> | Observable<FindDocumentTypesResponse> | FindDocumentTypesResponse;

    updateDocumentType(request: UpdateDocumentTypeDto): void;

    deleteDocumentType(request: DeleteDocumentTypeDto): void;

    updateUrgencyInterval(request: UpdateUrgencyIntervalDto): void;
}

export function OrganizationsManagementServiceControllerMethods() {
    return function (constructor: Function) {
        const grpcMethods: string[] = [
            "create",
            "createOrganizationDivision",
            "findOrganizationDivisions",
            "updateOrganizationDivision",
            "deleteOrganizationDivision",
            "createOrganizationPost",
            "findOrganizationPosts",
            "updateOrganizationPost",
            "deleteOrganizationPost",
            "createDocumentAim",
            "findDocumentAims",
            "updateDocumentAim",
            "deleteDocumentAim",
            "crateDocumentType",
            "findDocumentTypes",
            "updateDocumentType",
            "deleteDocumentType",
            "updateUrgencyInterval"
        ];
        for (const method of grpcMethods) {
            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            GrpcMethod("OrganizationsManagementService", method)(constructor.prototype[method], method, descriptor);
        }
        const grpcStreamMethods: string[] = [];
        for (const method of grpcStreamMethods) {
            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            GrpcStreamMethod("OrganizationsManagementService", method)(
                constructor.prototype[method],
                method,
                descriptor
            );
        }
    };
}

export const ORGANIZATIONS_MANAGEMENT_SERVICE_NAME = "OrganizationsManagementService";
