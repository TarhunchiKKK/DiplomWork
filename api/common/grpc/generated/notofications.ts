// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.14.0
// source: notofications.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";
import { Timestamp } from "./google/protobuf/timestamp";
import { UInt32Value } from "./google/protobuf/wrappers";

export interface Notification {
    id: string;
    receiverId: string;
    type: string;
    topic: string;
    message: string;
    status: string;
    createdAt: Timestamp | undefined;
    processedAt: Timestamp | undefined;
}

export interface FindNotificationsResponse {
    notifications: Notification[];
}

export interface FindUserNotificationsDto {
    userId: string;
}

export interface FindUserNotificationsCountDto {
    userId: string;
}

export interface ActivateNotificationDto {
    notificationId: string;
}

export interface ProcessNotificationDto {
    notificationId: string;
}

export const NOTIFICATIONS_PACKAGE_NAME = "notifications";

export interface NotificationsServiceClient {
    findUserNotifications(request: FindUserNotificationsDto): Observable<FindNotificationsResponse>;

    findUserNotificationsCount(request: FindUserNotificationsCountDto): Observable<UInt32Value>;

    activateNotification(request: ActivateNotificationDto): Observable<Empty>;

    processNotification(request: ProcessNotificationDto): Observable<Empty>;
}

export interface NotificationsServiceController {
    findUserNotifications(
        request: FindUserNotificationsDto
    ): Promise<FindNotificationsResponse> | Observable<FindNotificationsResponse> | FindNotificationsResponse;

    findUserNotificationsCount(
        request: FindUserNotificationsCountDto
    ): Promise<UInt32Value> | Observable<UInt32Value> | UInt32Value;

    activateNotification(request: ActivateNotificationDto): void;

    processNotification(request: ProcessNotificationDto): void;
}

export function NotificationsServiceControllerMethods() {
    return function (constructor: Function) {
        const grpcMethods: string[] = [
            "findUserNotifications",
            "findUserNotificationsCount",
            "activateNotification",
            "processNotification"
        ];
        for (const method of grpcMethods) {
            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            GrpcMethod("NotificationsService", method)(constructor.prototype[method], method, descriptor);
        }
        const grpcStreamMethods: string[] = [];
        for (const method of grpcStreamMethods) {
            const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            GrpcStreamMethod("NotificationsService", method)(constructor.prototype[method], method, descriptor);
        }
    };
}

export const NOTIFICATIONS_SERVICE_NAME = "NotificationsService";
