syntax = "proto3";

import "common.proto";

package workflows;

/********************************************Workflows*********************************************************************/

service WorkflowsService {
    rpc Create (ICreateWorkflowDto) returns (ICreateWorkflowResponse) {}

    rpc Start (common.IOnlyId) returns (common.IEmptyResponse) {}

    rpc FindAllByCreatorId (common.IOnlyId) returns (IFindWorkflowsResponse) {}

    rpc FindOneById (common.IOnlyId) returns (IFindOneWorkflowResponse) {}

    rpc FindOneByDocumentId (common.IOnlyId) returns (IFindOneWorkflowResponse) {}

    rpc Delete (common.IOnlyId) returns (common.IEmptyResponse) {}
}

message ICreateWorkflowDto {
    string userId = 1;

    string documentId = 2;

    string documentTitle = 3;
}

message IWorkflowResponseData {
    string id = 1;

    string documentTitle = 2;

    string creatorId = 3;

    string documentId = 4;

    string status = 5;

    optional string completedAt = 6;
}

message ICreateWorkflowResponse {
    oneof response {
        IWorkflowResponseData data = 1;

        common.IHttpError error = 2;
    }
}

message IFindOneWorkflowResponse {
    oneof response {
        IWorkflowResponseData data = 1;

        common.IHttpError error = 2;
    }
}

message IFindWorkflowsResponseData {
    repeated IWorkflowResponseData workflows = 1;
}

message IFindWorkflowsResponse {
    oneof response {
        IFindWorkflowsResponseData data = 1;

        common.IHttpError error = 2;
    }
}

/********************************************Workflow Participants*********************************************************************/

service WorkflowParticipantsService {
    rpc UpsertWorkflowParticipants (IUpsertWorkflowParticipantsDto) returns (common.IEmptyResponse) {}

    rpc FindAllUserWorkflows (common.IOnlyId) returns (IFindWorkflowsResponse) {}
}

message IUpsertWorkflowParticipantDto   {
    optional string id = 1;

    string role = 2;

    string userId = 3;
}

message IUpsertWorkflowParticipantsDto {
    repeated IUpsertWorkflowParticipantDto participants = 1;

    string workflowId = 2;
}

/********************************************Approvals*********************************************************************/

service ApprovalsService {
    rpc Upsert (IUpsertApprovalDto) returns (IApprovalResponse) {}

    rpc FindOne (IFindOneApprovalDto) returns (IApprovalResponse) {} 

    rpc ResetAllByWorkflowId (common.IOnlyId) returns (common.IEmptyResponse) {}
}

message IUpsertApprovalDto {
    string workflowId = 1;

    string participantId = 2;

    string status = 3;
}

message IFindOneApprovalDto {
    string workflowId = 1;

    string participantId = 2;
}

message IApproval {
    string id = 1;

    string status = 2;

    string createdAt = 3;

    string updatedAt = 4;
}

message IApprovalResponse {
    oneof response {
        IApproval data = 1;

        common.IEmptyResponse empty = 2;
    }
}