syntax = "proto3";

import "common.proto";

package users;

/********************************************Users*********************************************************************/

service UsersService {
    rpc FindOne (common.IOnlyId) returns (IFindOneUserResponse) {}

    rpc FindAllByIds (common.IOnlyIds) returns (IFindManyUsersResponse) {}

    rpc FindAllByOrganizationId (common.IOnlyId) returns (IFindManyUsersResponse) {}

    rpc UpdateProfile (IUpdateProfileDto) returns (common.IEmptyResponse) {}
}

message IFindOneUserResponseData {
    string id = 1;

    optional string username = 2;

    string email = 3;

    string status = 4;
}

message IFindOneUserResponse {
    oneof response {
        IFindOneUserResponseData data = 1;

        common.IHttpError error = 2;
    }
}

message IFindManyUsersResponseData {
    repeated IFindOneUserResponseData users = 1;
}

message IFindManyUsersResponse {
    oneof response {
        IFindManyUsersResponseData data = 1;

        common.IHttpError error = 2;
    }
}

message IUpdateProfileDto {
    string id = 1;

    optional string username = 2;
}

/********************************************Authentication*********************************************************************/

service AuthenticationService {
    rpc RegisterAdmin (IRegisterAdminDto) returns (common.IAuthResponse) {}

    rpc Login (ILoginDto) returns (common.IAuthResponse) {}

    rpc RefreshProfile (common.IOnlyId) returns (common.IAuthResponse) {}
}

message IRegisterAdminDto {
    string username = 1;

    string email = 2;

    string password = 3;
}

message ILoginDto {
    string login = 1;

    string password = 2;
}

/********************************************Users Invitations*********************************************************************/

service UsersInvitationService {
    rpc Invite (IInviteUsersDto) returns (common.IEmptyResponse) {}

    rpc Confirm (IConfirmInvitationDto) returns (common.IAuthResponse) {}
}

message IInviteUsersDto {
    string organizationId = 1;

    string adminEmail = 2;

    repeated string emails = 3;
}

message IConfirmInvitationDto {
    string username = 1;

    string password = 2;

    string token = 3;
}

/********************************************Password Recovery*********************************************************************/

service PasswordRecoveryService {
    rpc Reset (common.IOnlyId) returns (common.IEmptyResponse) {}

    rpc Update (IUpdatePasswordDto) returns (common.IEmptyResponse) {}
}

message IUpdatePasswordDto {
    string token = 1;

    string password = 2;
}

/********************************************Account Deactivation*********************************************************************/

service AccountDeactivationService {
    rpc Activate (common.IOnlyId) returns (common.IEmptyResponse) {}

    rpc Deactivate (common.IOnlyId) returns (common.IEmptyResponse) {}
}

/********************************************TOTP Authentication*********************************************************************/

service TotpAuthenticationService {
    rpc Generate (IGenerateTotpDto) returns (IGenerateTotpResponse) {}

    rpc Enable (IEnableTotpDto) returns (common.IEmptyResponse) {}

    rpc Disable (common.IOnlyId) returns (common.IEmptyResponse) {}

    rpc Login (ILoginWithTotpDto) returns (common.IAuthResponse) {}
}

message IGenerateTotpDto {
    string userId = 1;

    string userEmail = 2;
}

message ICreateTotpResponseData {
    string qrCode = 1;

    string secret = 2;
}

message IGenerateTotpResponse {
    oneof response {
        ICreateTotpResponseData data = 1;

        common.IHttpError error = 2;
    }
}

message IEnableTotpDto {
    string userId = 1;

    string userEmail = 2;

    string secret = 3;

    string pin = 4;
}

message ILoginWithTotpDto {
    string userId = 1;

    string userEmail = 2;

    string pin = 3;
}